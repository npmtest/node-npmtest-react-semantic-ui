{"/home/travis/build/npmtest/node-npmtest-react-semantic-ui/test.js":"/* istanbul instrument in package npmtest_react_semantic_ui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/lib.npmtest_react_semantic_ui.js":"/* istanbul instrument in package npmtest_react_semantic_ui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_semantic_ui = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_semantic_ui = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-semantic-ui && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_semantic_ui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_semantic_ui\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_semantic_ui.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_semantic_ui.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_semantic_ui.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_semantic_ui.__dirname + '/lib.npmtest_react_semantic_ui.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/node_modules/react-semantic-ui/index.js":"function lib(React) {\n  var common = require('./lib/common')(React),\n      form = require('./lib/form')(React, common);\n  return {\n    form: form,\n    input: require('./lib/input')(React, form, common),\n    layout: require('./lib/layout')(React, common)\n  };\n}\n\nif (global.React) {\n  global.rsui = lib(global.React);\n} else {\n  module.exports = lib;\n}","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/node_modules/react-semantic-ui/gulpfile.js":"var header = require('gulp-header'),\n    through = require('through2'),\n    gutil = require('gulp-util'),\n    browserify = require('gulp-browserify'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    gulp = require('gulp'),\n    fs = require('fs'),\n    path = require('path');\n\nvar packageInfo = JSON.parse(fs.readFileSync('./package.json', {encoding: 'utf-8'})),\n    name = packageInfo.name,\n    version = packageInfo.version,\n    headerContent = fs.readFileSync('./_header.txt', {encoding: 'utf8'}),\n    headerMinContent = fs.readFileSync('./_header.min.txt', {encoding: 'utf8'}),\n    versionMatcher = new RegExp(name + ' v[0-9\\.]+');\n\nheaderContent = headerContent.replace(versionMatcher, name + ' v' + version);\nheaderMinContent = headerMinContent.replace(versionMatcher, name + ' v' + version);\n\nfunction build() {\n  var pipeline = gulp.src('./index.js')\n      .pipe(browserify({\n        transform: ['reactify']\n      }))\n      .pipe(rename('react-semantic-ui.js'))\n      .pipe(header(headerContent))\n      .pipe(gulp.dest('./'))  \n      .pipe(uglify())\n      .pipe(rename('react-semantic-ui.min.js'))\n      .pipe(header(headerMinContent))\n      .pipe(gulp.dest('./'));\n}\n\ngulp.task('build', function() {\n  build();\n});\n\ngulp.task('docs', function() {\n  gulp.src('./lib/*.js')\n    .pipe(docs)\n    .pipe(gulp.dest('./docs'));\n});\n\ngulp.task('debug', function() {\n  _watch(true);\n});\n\n\nvar docs = through.obj(function(file, enc, cb) {\n  var self = this;\n  scanForDocs(file.contents, function(contents) {\n    if (contents) {\n      var index = file.path.indexOf('/lib'),\n          base = file.path.substring(0, index),\n          relative = file.path.substring(index + 4);\n      for (var name in contents) {\n        var _relative = relative.substr(0, relative.lastIndexOf(\".\")) + \"/\" + name + \".md\";\n \n        var _file = new gutil.File({\n          cwd: file.cwd,\n          base: file.base,\n          path: path.join('docs', _relative),\n          contents: new Buffer(contents[name])\n        })\n        self.push(_file);\n      }\n    }\n    cb();\n  });\n});\n\nfunction scanForDocs(buffer, cb) {\n  var lines = buffer.toString('utf8').split('\\n'),\n      currentTitle,\n      currentData,\n      allDocs = {};\n\n  function reset() {\n    if (currentTitle) {\n      allDocs[currentTitle] = currentData;\n    }\n    currentTitle = undefined;\n    currentData = undefined;\n  }\n\n  for (var i=0; i<lines.length; i++) {\n    var line = lines[i];\n    if (!currentTitle) {\n      if (line.indexOf('/***') >= 0) {\n        currentTitle = line.replace(/^\\s*\\/\\*\\*\\* /g, '');\n      }\n    } else {\n      if (line.indexOf('***/') >= 0) {\n        reset();\n      } else {\n        line = line.replace(/^\\s*\\*\\s*$/, '');\n        line = line.replace(/^\\s*\\* /, '');\n        if (!currentData) {\n          currentData = line;\n        } else {\n          currentData += ('\\n' + line);\n        }\n      }\n    }\n  }\n\n  reset();\n  cb(createDocs(allDocs));\n}\n\nfunction createDocs(data) {\n  for (var title in data) {\n    var body = data[title],\n        titleUnderline = '';\n    while (titleUnderline.length < title.length) titleUnderline += '=';\n\n    var content = title + '\\n' + titleUnderline + '\\n\\n' + body;\n    data[title] = content;\n  }\n  return data;\n}\n\n","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/node_modules/react-semantic-ui/react-semantic-ui.js":"/*!\n * react-semantic-ui v0.2.0 (https://github.com/jhudson8/react-semantic-ui)\n * \n * Copyright (c) 2014 Joe Hudson<joehud_AT_gmail.com>\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\nfunction lib(React) {\n  var common = require('./lib/common')(React),\n      form = require('./lib/form')(React, common);\n  return {\n    form: form,\n    input: require('./lib/input')(React, form, common),\n    layout: require('./lib/layout')(React, common)\n  };\n}\n\nif (global.React) {\n  global.rsui = lib(global.React);\n} else {\n  module.exports = lib;\n}\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./lib/common\":2,\"./lib/form\":3,\"./lib/input\":4,\"./lib/layout\":5}],2:[function(require,module,exports){\nvar cache = { id: 0 },\n    reactBackboneAware = !!React.mixins.exists('modelFieldValidator');\n\nmodule.exports = function(React) {\n  return {\n    uniqueId: function() {\n      return 'rsui-' + cache.id++;\n    },\n\n    defaults: function() {\n      var base = arguments[0],\n          current;\n      for (var i=1; i<arguments.length; i++) {\n        current = arguments[i];\n        for (var name in current) {\n          if (base[name] === undefined) {\n            base[name] = current[name];\n          }\n        }\n      }\n      return base;\n    },\n\n    omit: function(data, keys) {\n      var rtn = {};\n      for (var name in data) {\n        if (keys.indexOf(name) === -1) {\n          rtn[name] = data[name];\n        }\n      }\n      return rtn;\n    },\n\n    mergeClassNames: function() {\n      var rtn = '';\n      for (var i=0; i<arguments.length; i++) {\n        if (arguments[i]) {\n          if (rtn.length > 0) rtn += ' ';\n          rtn += arguments[i];\n        }\n      }\n      return rtn && rtn;\n    },\n\n    eventBinder: function(value, type, context, cancelEvent) {\n      return function(event) {\n        if (cancelEvent) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n        if (context[type]) {\n          context[type](value, event);\n        }\n        if (context.props[type]) {\n          context.props[type](value, event);\n        }\n      };\n    },\n\n    result: function(value, context) {\n      if (typeof value === 'function') {\n        return value.call(context);\n      } else {\n        return value;\n      }\n    },\n\n    init: function(exports, classData, options) {\n      options = options || {};\n\n      // allow for special setup if https://github.com/jhudson8/react-backbone is installed\n      if (reactBackboneAware && options.ifReactBackbone) {\n        options.ifReactBackbone(options);\n      }\n\n      var _mixins = exports.mixins;\n      if (!exports.mixins) {\n        _mixins = exports.mixins || {all: []};\n      }\n\n      function _init() {\n        for (var name in classData) {\n          var data = classData[name],\n              spec = {};\n          for (var _name in data) {\n            spec[_name] = data[_name];\n          }\n          if (options.defaults) {\n            for (var fName in options.defaults) {\n              if (!spec[fName]) {\n                spec[fName] = options.defaults[fName];\n              }\n            }\n          }\n          options.mixins = options.mixins || {};\n          spec.mixins = [spec.mixins, _mixins[name], _mixins.all, options.mixins[name], options.mixins.all];\n          exports[name] = React.createClass(spec);\n        }\n      }\n\n      exports.reset = _init;\n      exports.classData = classData;\n      _init();\n    }\n  };\n};\n\n},{}],3:[function(require,module,exports){\nmodule.exports = function(React, common) {\n  var exports = {\n\n    errorRenderer: function(error, children) {\n      children.push(React.DOM.div({className: 'ui red pointing top ui label'}, error));\n    },\n\n    // apply an icon to a button\n    applyIcon: function(context) {\n      var _children = [];\n      _children.push(React.DOM.i({className: 'icon ' + context.icon}));\n      React.Children.forEach(context.children, function(child) {\n        _children.push(child);\n      });\n      context.children = _children;\n    },\n\n    // apply a loading state to a button\n    applyLoadingState: function(context) {\n      context.icon = 'loading';\n      context.disabled = true;\n      if (this.props.loadingMessage) {\n        context.children = this.props.loadingMessage;\n      }\n    },\n\n    fieldRenderer: function() {\n      var props = this.props,\n          state = this.state || {},\n          className = common.mergeClassNames('field', this._controlClassName && this._controlClassName()),\n          id = this.props.id;\n          labelAfter = props.labelAfter !== undefined ? props.labelAfter : this.defaultLabelAfter,\n          inlineLabel = props.inlineLabel !== undefined ? props.inlineLabel : this.defaultInlineLabel,\n          containerClass = common.mergeClassNames(\n            props.containerClass, this.defaultContainerClass && this.defaultContainerClass()),\n          inputFieldProps = common.omit(props, ['label', 'disabled', 'fieldClass', 'value']),\n          error = props.error || state.error;\n\n      if (error) {\n        className = common.mergeClassNames(className, 'error');\n      }\n      if (this.props.disabled) {\n        className = common.mergeClassNames(className, 'disabled');\n      }\n      if (props.fieldClass) {\n        className = common.mergeClassNames(props.fieldClass, className);\n      }\n      if (props.label && !id) {\n        id = common.uniqueId();\n      }\n      if (state.loading || props.loading) {\n        containerClass = common.mergeClassNames(containerClass, 'loading');\n      }\n\n      inputFieldProps.id = id;\n      inputFieldProps.defaultDisabled = this.props.disabled;\n      if (this.modifyInputFieldProps) {\n        inputFieldProps = this.modifyInputFieldProps(inputFieldProps);\n      }\n\n      var inputField = this.renderInput(inputFieldProps),\n          label = props.label ? React.DOM.label({htmlFor: id}, props.label) : undefined,\n          fieldChildren = [],\n          containerChildren = [];\n\n      if (containerClass) {\n        containerChildren.push(inputField);\n        if (inlineLabel && label) {\n          containerChildren.splice(labelAfter?1:0, 0, label);\n          label = undefined;\n        }\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, containerChildren);\n          } else {\n            exports.errorRenderer.call(this, error, containerChildren);\n          }\n        }\n        var container = React.DOM.div({className: containerClass}, containerChildren);\n        if (label) {\n          fieldChildren.push(container);\n        } else {\n          return container;\n        }\n      } else if (!label) {\n        return inputField;\n      } else {\n        fieldChildren.push(inputField);\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, fieldChildren);\n          } else {\n            exports.errorRenderer.call(this, error, fieldChildren);\n          }\n        }\n      }\n      if (label) {\n        fieldChildren.splice(labelAfter ? 1 : 0, 0, label);\n      }\n      return React.DOM.div({className: className}, fieldChildren);\n    }\n  };\n\n  var classData = {\n\n    /*** Form\n     * A form control which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***loading***: true if the form is in a loading state\n     * - ***className***: additional form class name (\"ui form segment\") will already be applied\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Form***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Form = rsui.form.Form;\n     *     <Form className=\"my-class\" loading={isLoading} onSubmit={handleSubmit}> ... </Form>\n     ***/\n    Form: {\n      render: function() {\n        var props = this.props,\n            loading = props.loading || this.state && this.state.loading;\n            attributes = common.defaults({\n              className: common.mergeClassNames('ui form', this._className, props.className, loading && 'loading')\n            }, this.props);\n        return React.DOM.form(attributes, props.children);\n      }\n    },\n\n    /*** Control\n     * Form field control meant to provide a label and additon field wrapper elements to\n     * arbitrary nested content\n     *\n     * Properties\n     * ----------\n     * - ***id***: the id used for the label (for attribute)\n     * - ***label***: the field label\n     * - ***inlineLabel***: true if the label should be included as a sibling to the nested content\n     * - ***labelAfter***: true if the inline label should be applied as the last sibling\n     * - ***containerClass***: the inner container element class name\n     * - ***className***: the outer field element class name\n     * - ***disabled***: true if the field should render as disabled\n     * - ***loading***: true if the field should render as loading\n     *\n     * Overrides\n     * ---------\n     * - ***fieldRenderer***: function which acts as the render method for this component\n     * - ***mixins.Control***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Control = rsui.form.Control;\n     *     <Control label=\"Foo\" error=\"some error message to display\"> some input field </Control>\n     ***/\n    Control: {\n      render: exports.fieldRenderer,\n      renderInput: function() {\n        return this.props.children;\n      },\n      _controlClassName: function() {\n        return  this._className;\n      }\n    },\n\n    /*** Button\n     * A standard input button which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***icon***: the [icon name](http://semantic-ui.com/elements/icon.html)\n     * - ***className***: additional button class name (\"ui button\" will already be applied)\n     * - ***disabled***: true if the button should be disabled\n     * - ***loading***: true if the button is in a loading state\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Button***: default mixins that should be applied\n     * - ***applyIcon***: ```function({children, className, disabled, icon})```\n     *     apply the icon and update any data for rendering\n     * - ***applyLoadingState***: ```function({children, className, disabled, icon})```\n     *     apply a loading state and update any data for rendering\n     *\n     * Example\n     * --------\n     *     var Button = rsui.form.Button;\n     *     <Button icon=\"comment\" onClick={myClickHandler}> Click me </Control>\n     *     <Button loading={true} label=\"This is loading\"/>\n     ***/\n    Button: {\n      render: function() {\n        var props = this.props,\n            state = this.state || {},\n            context = {\n              children: props.children,\n              className: props.className,\n              disabled: props.disabled || state.disabled,\n              icon: props.icon\n            };\n        if (this.props.label) {\n          context.children = [this.props.label];\n        }\n        if (this.props.loading || state.loading) {\n          exports.applyLoadingState.call(this, context);\n        }\n        if (context.icon) {\n          exports.applyIcon.call(this, context);\n        }\n        if (context.disabled) {\n          context.className += ' disabled';\n        }\n        var attributes = common.defaults({\n          className: common.mergeClassNames('ui button', this._className, context.className)\n        }, this.props);\n        return React.DOM.button(attributes, context.children);\n      }\n    }\n  };\n\n  common.init(exports, classData, {\n    ifReactBackbone: function(options) {\n      options.mixins = {\n        Button: ['modelLoadOn'],\n        Form: ['modelAsyncListener']\n      };\n    }\n  });\n\n  return exports;\n};\n\n},{}],4:[function(require,module,exports){\nmodule.exports = function(React, form, common) {\n\n  function getDefaultValue(self, props) {\n    return props.defaultValue || self.getModelValue();\n  }\n\n  React.mixins.add('modelValueAccessor', {\n    getModelValue: function() {\n      return this.state && this.state.value || this.props.value;\n    },\n    setModelValue: function(value) {\n      this.setState({value: value});\n    }\n  });\n\n  var exports = {\n    mixins: {all: ['modelValueAccessor']},\n\n    optionsRetriever: function(defaultValue) {\n      var rtn = (this.props.options || []).map(function(item) {\n        var label, value, selected;\n        if (typeof item === 'string') {\n          selected = defaultValue === item;\n          value = item;\n          label = item;\n        } else {\n          selected = defaultValue === item.value;\n          value = item.value;\n          label = item.label;\n        }\n        return {value: value, label: label, selected: selected};\n      });\n      if (this.props.placeholder) {\n        rtn.splice(0, 0, {value: '', label: this.props.placeholder});\n      }\n      return rtn;\n    }\n  };\n\n  var classData = {\n\n    /*** Text\n     * Standard text field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***type***: the input type (\"text\" by default)\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <Text label=\"Foo\" defaultValue=\"bar\"> ... </Text>\n     ***/\n    Text: {\n      renderInput: function(props) {\n        props.type = props.type || 'text';\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.input(props);\n      }\n    },\n\n    /*** TextArea\n     * Standard textarea field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <TextArea label=\"Foo\" defaultValue=\"bar\"> ... </TextArea>\n     ***/\n    TextArea: {\n      renderInput: function(props) {\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.textarea(props);\n      }\n    },\n\n    /*** Select\n     * Standard select field that can display a label and optional field wrapper.\n     * A [fancier control](./Dropdown.md) can be used as well.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Select***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *      var Select = rsui.input.Select;\n     *      <Select label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Select: {\n      defaultContainerClass: function() {\n        return common.mergeClassNames('ui dropdown', this.props.type);\n      },\n      renderInput: function(props) {\n        var defaultValue = getDefaultValue(this, props);\n            options = exports.optionsRetriever.call(this, defaultValue).map(function(option) {\n          return React.DOM.option({value: option.value}, option.label);\n        });\n        props.defaultValue = defaultValue;\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.select(props, options);\n      }\n    },\n\n    /*** Checkbox\n     * Standard checkbox field that can display a label and optional field wrapper.\n     *\n     * Properties\n     * ----------\n     * - ***defaultChecked*** true if the field should be checked in it's initial state\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Checkbox***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Checkbox = rsui.input.Checkbox;\n     *     <Checkbox label=\"Foo\" defaultChecked={true} defaultValue=\"abc\"/>\n     ***/\n    Checkbox: {\n      defaultLabelAfter: true,\n      defaultInlineLabel: true,\n      defaultContainerClass: function() {\n        return common.mergeClassNames('ui checkbox', this.props.type, this._className);\n      },\n      renderInput: function(props) {\n        var checked = getDefaultValue(this, props);\n        if (checked === undefined) {\n          checked = this.props.defaultChecked;\n        }\n        props.defaultChecked = checked;\n        props.value = this.props.value || 'true';\n        props.type = 'checkbox';\n        props.className = common.mergeClassNames(props.className);\n        return React.DOM.input(props);\n      },\n      getDOMValue: function(el) {\n        return !!el.checked;\n      }\n    },\n\n    /*** RadioGroup\n     * Collection of radio items field that can display a label and optional field wrapper.  The item\n     * data is retrieved in the same way that the [Dropdown](./Dropdown.md) component does.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.RadioGroup***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    RadioGroup: {\n      defaultContainerClass: function() {\n        return 'grouped fields inline';\n      },\n      renderInput: function(props) {\n        var self = this,\n            state = this.state,\n            value = getDefaultValue(this, props),\n            options = exports.optionsRetriever.call(this, value).map(function(option) {\n              var id = common.uniqueId(),\n                  className = common.mergeClassNames('ui radio checkbox', props.className, this._className);\n              return React.DOM.div({className: 'field'}, React.DOM.div({className: className},\n                React.DOM.input({id: id, type: 'radio', name: props.name, value: option.value,\n                    defaultChecked: option.selected, onChange: common.eventBinder(option.value, 'onChange', self)}),\n                React.DOM.label({htmlFor: id}, option.label)\n              ));\n            });\n        return options;\n      }\n    },\n\n    /*** Dropdown\n     * Similar to the [Select](./Select.md) component but fancier.  See [examples](http://semantic-ui.com/modules/dropdown.html#/examples)\n     * for more details on the actual semantic-ui component.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Dropdown***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Dropdown: {\n      render: function() {\n        var props = this.props,\n            value = getDefaultValue(this, props);\n        var options = exports.optionsRetriever.call(this, value).map(function(option) {\n          return React.DOM.div({className: common.mergeClassNames('item', option.selected ? 'active' : undefined), 'data-value': option.value}, option.label);\n        });\n        var inputProps = common.omit(props, ['label', 'className', 'options', 'value', 'icon', 'onChange', 'onShow', 'onHide']);\n        inputProps.type = 'hidden';\n        inputProps.defaultValue = value;\n        return React.DOM.div({className: common.mergeClassNames('ui dropdown ' + (props.type || 'floating'), props.className, this._className)},\n          React.DOM.input(inputProps),\n          React.DOM.div({className: 'text'}, props.label),\n          React.DOM.i({className: (props.icon || 'dropdown') + ' icon'}),\n          React.DOM.div({className: 'menu'}, options)\n        );\n      },\n      componentDidMount: function() {\n        $(this.getDOMNode()).dropdown({\n          onChange: this.props.onChange,\n          onShow: this.props.onShow,\n          onHide: this.props.onHide\n        });\n      },\n      getDOMValue: function(el) {\n        return $(this.getDOMNode()).dropdown('get value');\n      }\n    }\n  };\n\n  common.init(exports, classData, {\n    defaults: {\n      render: form.fieldRenderer,\n      getDOMValue: function(el) {\n        return $(el).val();\n      }\n    },\n\n    ifReactBackbone: function(options) {\n      exports.defaultModelSetOptions = {validate: true, allowEmpty: true};\n      /**\n       * This mixin listenets for onChange events and set the associated model with that value.  If the\n       * model change succeeds, the \"error\" state attribute will be removed.\n       */\n      React.mixins.add('modelChangeSetter', {\n        modifyInputFieldProps: function (props) {\n          var onChange = props.onChange,\n            model = this.getModel(),\n            key = props.key;\n          if (props.set === undefined || props.set === true) {\n            props.set = exports.defaultModelSetOptions;\n            if (props.set) {\n              var self = this;\n              props.onChange = function (event) {\n                var model = self.getModel();\n                if (model) {\n                  var value = self.getDOMValue(event.currentTarget);\n                  if (self.setModelValue(value, props.set) !== false) {\n                    // we did not encounter a validation error\n                    if (self.state && self.state.error) {\n                      self.setState({error: false});\n                    }\n                  }\n                  if (onChange) {\n                    onChange.call(self, event);\n                  }\n                }\n              };\n            }\n          }\n          return props;\n        }\n      }, 'modelValueAccessor', 'modelEventBinder');\n      options.mixins = {all: ['modelChangeSetter', 'modelFieldValidator']};\n    }\n  });\n\n  return exports;\n};\n\n},{}],5:[function(require,module,exports){\nmodule.exports = function(React, common) {\n  var exports = {\n    totalPageRetriever: function() {\n      return this.props.totalPages;\n    },\n\n    valueRetriever: function(column, entry) {\n      if (entry.get) {\n        return entry.get(column.key);\n      }\n      return entry[column.key];\n    },\n\n    keyRetriever: function(entry) {\n      return entry.id || entry.key;\n    },\n\n    entriesRetriever: function(entries) {\n      if (entries.models) {\n        return entries.models;\n      }\n      return entries;\n    }\n  };\n  \n  var classData = {\n\n    Loader: {\n      render: function() {\n        var props = this.props,\n            loading = this.state && this.state.loading || props.loading;\n\n        if (this.props.loading || this.state && this.state.loading) {\n          var className = common.mergeClassNames('ui', 'segment', props.className);\n              loadingClass = common.mergeClassNames('ui active', props.type || 'inverted dimmer');\n          return React.DOM.div({className: className},\n                  React.DOM.div({className: loadingClass},\n                    React.DOM.div({className: 'ui loader' + (props.label ? ' text' : '')}, props.label)),\n                  this.props.children);\n        } else {\n          return React.DOM.div({className: props.className}, this.props.children);\n        }\n      }\n    },\n\n\n    Steps: {\n      getInitialState: function() {\n        return {\n          active: this.props.active || this.props.steps[0].key\n        };\n      },\n      render: function() {\n        var self = this,\n            props = this.props,\n            className = common.mergeClassNames('ui steps', props.type, props.className),\n            activeStep = this.state.active,\n            children = props.steps.map(function(step) {\n              var className = common.mergeClassNames('ui step', step.key === activeStep ? 'active' : undefined, step.disabled ? 'disabled' : undefined);\n              return React.DOM.div({className: className, onClick: self.clicker(step)}, step.label);\n            });\n        return React.DOM.div({className: className}, children);\n      },\n      clicker: function(step) {\n        var self = this;\n        return function() {\n          if (!step.disabled) {\n            var rtn = self.props.onChange && self.props.onChange(step);\n            if (rtn === undefined || rtn) {\n              self.setState({active: step.key});\n            }\n          }\n        };\n      }\n    },\n\n\n    /*** Paginator\n     * A paginator component.\n     *\n     * Properties\n     * ----------\n     * - ***totalPages***: the number of total pages\n     * - ***className***: additional top level class name\n     * - ***page***: (default: 1) the current page number (1-based)\n     * - ***radius***: (default: 1) the number of page links (moving out from current page) to show\n     * - ***anchor***: (default: 1) the number of page links (moving out from each end) to show\n     * - ***onChange***: called when the user clicked a page number\n     *\n     * Example\n     * ---------\n     *     <Paginator page={2} totalPages={12} onChange={funtion(pageNumber) {...}}/>\n     ***/\n    Paginator: {\n      getInitialState: function() {\n        return {\n          page: this.props.page || 1\n        };\n      },\n\n      render: function() {\n        var totalPages = exports.totalPageRetriever.call(this);\n        if (totalPages && totalPages > 1) {\n          var current = this.state.page,\n              radius = this.props.radius || 0,\n              anchor = this.props.anchor || 1,\n              separator = this.props.separator || '...',\n              min = Math.max(current - radius, 1),\n              max = Math.min(current + radius, totalPages),\n              showArrows = this.props.showArrows === undefined ? true : this.props.showArrows,\n              totalShowing = (radius * 2) + (anchor * 2) + 3 /* current + separator */,\n              showRightSeparator = (totalPages > current + radius + anchor),\n              showLeftSeparator = (current  > (anchor + Math.max(1, radius))),\n              compact = this.props.compact,\n              index = {},\n              children = [];\n          if (compact) {\n            showArrows = false;\n          }\n\n          if (showLeftSeparator) {\n            totalShowing--;\n          }\n          if (showRightSeparator) {\n            totalShowing--;\n          }\n\n          var i;\n          // starting anchor\n          for (i=1; i<=anchor && i<=totalPages; i++) {\n            children.push(i);\n            index[i] = children.length;\n          }\n\n          // radius\n          for (i=min; i<=max; i++) {\n            if (!index[i]) {\n              children.push(i);\n              index[i] = children.length;\n            }\n          }\n\n          // upper anchor\n          for (i=Math.max(totalPages-anchor+1, current+1); i<=totalPages; i++) {\n            if (!index[i]) {\n              children.push(i);\n              index[i] = children.length;\n            }\n          }\n\n          // always keep the same number of indicators showing - start down from middle\n          for (i=current; i > 0 && children.length < totalShowing; i--) {\n            if (typeof index[i] === 'undefined') {\n              _idx = index[i+1]-1;\n              children.splice(_idx, 0, i);\n              index[i] = _idx+1;\n            }\n          }\n          for (i=current; children.length < totalShowing && children.length < totalPages; i++) {\n            if (!index[i]) {\n              children.splice(i-1, 0, i);\n            }\n          }\n\n          // map the children to components\n          var self = this;\n          children = children.map(function(child) {\n            if (child === current) {\n              return React.DOM.div({className: 'active item'}, child);\n            } else {\n              return React.DOM.a({className: 'item', href: '#' + child, onClick: common.eventBinder(child, 'onChange', self, true)}, child);\n            }\n          });\n\n          // separators\n          if (showLeftSeparator) {\n            if (compact) {\n              children.splice(anchor, 0, React.DOM.a({className: 'icon item'}, React.DOM.i({className: 'left arrow icon', onClick: common.eventBinder(current-1, 'onChange', self, true)})));\n            } else {\n              children.splice(anchor, 0, React.DOM.div({className: 'disabled item'}, separator));\n            }\n          }\n          if (showRightSeparator) {\n            if (compact) {\n              children.splice(children.length-anchor, 0, React.DOM.a({className: 'icon item'}, React.DOM.i({className: 'right arrow icon', onClick: common.eventBinder(current+1, 'onChange', self, true)})));\n            } else {\n              children.splice(children.length-anchor, 0, React.DOM.div({className: 'disabled item'}, separator));\n            }\n          }\n\n          // arrows\n          if (showArrows) {\n            var nodeName, className;\n            if (current === 1) {\n              nodeName = 'div';\n              className = 'icon disabled item';\n            } else {\n              nodeName = 'a';\n              className = 'icon item';\n            }\n            children.splice(0, 0, React.DOM[nodeName]({\n              className: className, onClick: current > 1 ? common.eventBinder(current-1, 'onChange', self, true) : undefined\n            }, React.DOM.i({className: 'left arrow icon'})));\n\n            if (current === totalPages) {\n              nodeName = 'div';\n              className = 'icon disabled item';\n            } else {\n              nodeName = 'a';\n              className = 'icon item';\n            }\n            children.splice(children.length, 0, React.DOM[nodeName]({\n              className: className, onClick: current < totalPages ? common.eventBinder(current+1, 'onChange', self, true) : undefined\n            }, React.DOM.i({className: 'right arrow icon'})));\n          }\n\n          return React.DOM.div({className: 'ui pagination menu'}, children);\n\n        } else {\n          return React.DOM.div();\n        }\n      },\n\n      onChange: function(pageNumber) {\n        this.setState({\n          page: pageNumber\n        });\n      },\n\n      setPage: function(pageNumber) {\n        this.setState({\n          page: pageNumber\n        });\n      }\n    },\n\n\n    Menu: {\n      getInitialState: function() {\n        return {\n          active: this.props.active || this.props.items[0].key\n        };\n      },\n      render: function() {\n        var self = this,\n            props = this.props,\n            items = props.items || [],\n            activeKey = this.state.active,\n            active;\n        for (var i=0; i<items; i++) {\n          if (activeKey === items[i].key) {\n            active = items[i];\n            break;\n          }\n        }\n        var children = items.map(function(item) {\n          return React.DOM.a({className: common.mergeClassNames((item.key === activeKey) && 'active', 'item', item.className), href: item.href || item.key,\n              onClick: item.href ? props.onClick : common.eventBinder(item, 'onChange', self, true)}, item.icon ? React.DOM.i({className: item.icon + ' icon'}) : undefined, item.label);\n        });\n\n        return React.DOM.div({className: common.mergeClassNames('ui menu', props.className)},\n          children,\n          props.children\n        );\n      },\n      onChange: function(item) {\n        this.setState({active: item.key});\n        if (item.activate) {\n          item.activate();\n        }\n      },\n      setActive: function(key) {\n        this.setState({active: key});\n      }\n    },\n\n\n    Tabs: {\n      getInitialState: function() {\n        return {\n          active: this.props.active || this.props.tabs[0].key\n        };\n      },\n      render: function() {\n        var self = this,\n            props = this.props,\n            tabs = props.tabs || [],\n            type = props.type || 'top attached tabular',\n            bodyType = props.bodyType || 'bottom attached segment',\n            activeKey = this.state.active,\n            active;\n        for (var i=0; i<props.tabs.length; i++) {\n          if (activeKey === props.tabs[i].key) {\n            active = props.tabs[i];\n            break;\n          }\n        }\n\n        var tabLabels = tabs.map(function(tab) {\n          return React.DOM.a({className: common.mergeClassNames((tab.key === activeKey) && 'active', 'item', tab.className), href: tab.key,\n              onClick: common.eventBinder(tab, 'onChange', self, true)}, tab.icon ? React.DOM.i({className: tab.icon + ' icon'}) : undefined, tab.label);\n        });\n        var pageComponent = active.page();\n\n        return React.DOM.div({className: props.className},\n          React.DOM.div({className: 'ui ' + type + ' menu'},\n            tabLabels\n          ),\n          React.DOM.div({className: 'ui ' + bodyType},\n            pageComponent\n          )\n        );\n      },\n\n      onChange: function(tab) {\n        this.setState({active: tab.key});\n      }\n    },\n\n\n    Table: {\n      render: function() {\n        var self = this,\n            props = this.props;\n        var cols = props.cols.map(function(col) {\n          var label = common.result(col.label),\n              className = col.colClass;\n          if (typeof className === 'function') {\n            className = className.call(self, value, col);\n          }\n          return React.DOM.th({className: className}, label);\n        });\n\n        var index = 0,\n            rows = exports.entriesRetriever.call(this, props.entries).map(function(entry) {\n              var cells = props.cols.map(function(col) {\n                var value = exports.valueRetriever.call(this, col, entry),\n                    cellClassName = col.cellClassName;\n                if (typeof cellClassName === 'function') {\n                  cellClassName = cellClassName.call(self, value, col);\n                }\n                index++;\n                if (col.formatter) {\n                  value = col.formatter.call(this, value, entry, index, col);\n                }\n                if (col.factory) {\n                  value = col.factory.call(this, value, entry, index, col);\n                }\n                return React.DOM.td({className: cellClassName, key: col.key}, value);\n              });\n              var className = props.rowClassName && props.rowClassName.call(this, entry);\n              return React.DOM.tr({className: className, key: exports.keyRetriever(entry)}, cells);\n            });\n\n        return React.DOM.table({className: common.mergeClassNames('ui table', props.className)},\n          React.DOM.thead(undefined, cols),\n          React.DOM.tbody(undefined, rows)\n        );\n      }\n    }\n  };\n\n  common.init(exports, classData);\n\n  return exports;\n};\n\n},{}]},{},[1])","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/node_modules/react-semantic-ui/lib/common.js":"var cache = { id: 0 },\n    reactBackboneAware = !!React.mixins.exists('modelFieldValidator');\n\nmodule.exports = function(React) {\n  return {\n    uniqueId: function() {\n      return 'rsui-' + cache.id++;\n    },\n\n    defaults: function() {\n      var base = arguments[0],\n          current;\n      for (var i=1; i<arguments.length; i++) {\n        current = arguments[i];\n        for (var name in current) {\n          if (base[name] === undefined) {\n            base[name] = current[name];\n          }\n        }\n      }\n      return base;\n    },\n\n    omit: function(data, keys) {\n      var rtn = {};\n      for (var name in data) {\n        if (keys.indexOf(name) === -1) {\n          rtn[name] = data[name];\n        }\n      }\n      return rtn;\n    },\n\n    mergeClassNames: function() {\n      var rtn = '';\n      for (var i=0; i<arguments.length; i++) {\n        if (arguments[i]) {\n          if (rtn.length > 0) rtn += ' ';\n          rtn += arguments[i];\n        }\n      }\n      return rtn && rtn;\n    },\n\n    eventBinder: function(value, type, context, cancelEvent) {\n      return function(event) {\n        if (cancelEvent) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n        if (context[type]) {\n          context[type](value, event);\n        }\n        if (context.props[type]) {\n          context.props[type](value, event);\n        }\n      };\n    },\n\n    result: function(value, context) {\n      if (typeof value === 'function') {\n        return value.call(context);\n      } else {\n        return value;\n      }\n    },\n\n    init: function(exports, classData, options) {\n      options = options || {};\n\n      // allow for special setup if https://github.com/jhudson8/react-backbone is installed\n      if (reactBackboneAware && options.ifReactBackbone) {\n        options.ifReactBackbone(options);\n      }\n\n      var _mixins = exports.mixins;\n      if (!exports.mixins) {\n        _mixins = exports.mixins || {all: []};\n      }\n\n      function _init() {\n        for (var name in classData) {\n          var data = classData[name],\n              spec = {};\n          for (var _name in data) {\n            spec[_name] = data[_name];\n          }\n          if (options.defaults) {\n            for (var fName in options.defaults) {\n              if (!spec[fName]) {\n                spec[fName] = options.defaults[fName];\n              }\n            }\n          }\n          options.mixins = options.mixins || {};\n          spec.mixins = [spec.mixins, _mixins[name], _mixins.all, options.mixins[name], options.mixins.all];\n          exports[name] = React.createClass(spec);\n        }\n      }\n\n      exports.reset = _init;\n      exports.classData = classData;\n      _init();\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/node_modules/react-semantic-ui/lib/form.js":"module.exports = function(React, common) {\n  var exports = {\n\n    errorRenderer: function(error, children) {\n      children.push(React.DOM.div({className: 'ui red pointing top ui label'}, error));\n    },\n\n    // apply an icon to a button\n    applyIcon: function(context) {\n      var _children = [];\n      _children.push(React.DOM.i({className: 'icon ' + context.icon}));\n      React.Children.forEach(context.children, function(child) {\n        _children.push(child);\n      });\n      context.children = _children;\n    },\n\n    // apply a loading state to a button\n    applyLoadingState: function(context) {\n      context.icon = 'loading';\n      context.disabled = true;\n      if (this.props.loadingMessage) {\n        context.children = this.props.loadingMessage;\n      }\n    },\n\n    fieldRenderer: function() {\n      var props = this.props,\n          state = this.state || {},\n          className = common.mergeClassNames('field', this._controlClassName && this._controlClassName()),\n          id = this.props.id;\n          labelAfter = props.labelAfter !== undefined ? props.labelAfter : this.defaultLabelAfter,\n          inlineLabel = props.inlineLabel !== undefined ? props.inlineLabel : this.defaultInlineLabel,\n          containerClass = common.mergeClassNames(\n            props.containerClass, this.defaultContainerClass && this.defaultContainerClass()),\n          inputFieldProps = common.omit(props, ['label', 'disabled', 'fieldClass', 'value']),\n          error = props.error || state.error;\n\n      if (error) {\n        className = common.mergeClassNames(className, 'error');\n      }\n      if (this.props.disabled) {\n        className = common.mergeClassNames(className, 'disabled');\n      }\n      if (props.fieldClass) {\n        className = common.mergeClassNames(props.fieldClass, className);\n      }\n      if (props.label && !id) {\n        id = common.uniqueId();\n      }\n      if (state.loading || props.loading) {\n        containerClass = common.mergeClassNames(containerClass, 'loading');\n      }\n\n      inputFieldProps.id = id;\n      inputFieldProps.defaultDisabled = this.props.disabled;\n      if (this.modifyInputFieldProps) {\n        inputFieldProps = this.modifyInputFieldProps(inputFieldProps);\n      }\n\n      var inputField = this.renderInput(inputFieldProps),\n          label = props.label ? React.DOM.label({htmlFor: id}, props.label) : undefined,\n          fieldChildren = [],\n          containerChildren = [];\n\n      if (containerClass) {\n        containerChildren.push(inputField);\n        if (inlineLabel && label) {\n          containerChildren.splice(labelAfter?1:0, 0, label);\n          label = undefined;\n        }\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, containerChildren);\n          } else {\n            exports.errorRenderer.call(this, error, containerChildren);\n          }\n        }\n        var container = React.DOM.div({className: containerClass}, containerChildren);\n        if (label) {\n          fieldChildren.push(container);\n        } else {\n          return container;\n        }\n      } else if (!label) {\n        return inputField;\n      } else {\n        fieldChildren.push(inputField);\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, fieldChildren);\n          } else {\n            exports.errorRenderer.call(this, error, fieldChildren);\n          }\n        }\n      }\n      if (label) {\n        fieldChildren.splice(labelAfter ? 1 : 0, 0, label);\n      }\n      return React.DOM.div({className: className}, fieldChildren);\n    }\n  };\n\n  var classData = {\n\n    /*** Form\n     * A form control which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***loading***: true if the form is in a loading state\n     * - ***className***: additional form class name (\"ui form segment\") will already be applied\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Form***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Form = rsui.form.Form;\n     *     <Form className=\"my-class\" loading={isLoading} onSubmit={handleSubmit}> ... </Form>\n     ***/\n    Form: {\n      render: function() {\n        var props = this.props,\n            loading = props.loading || this.state && this.state.loading;\n            attributes = common.defaults({\n              className: common.mergeClassNames('ui form', this._className, props.className, loading && 'loading')\n            }, this.props);\n        return React.DOM.form(attributes, props.children);\n      }\n    },\n\n    /*** Control\n     * Form field control meant to provide a label and additon field wrapper elements to\n     * arbitrary nested content\n     *\n     * Properties\n     * ----------\n     * - ***id***: the id used for the label (for attribute)\n     * - ***label***: the field label\n     * - ***inlineLabel***: true if the label should be included as a sibling to the nested content\n     * - ***labelAfter***: true if the inline label should be applied as the last sibling\n     * - ***containerClass***: the inner container element class name\n     * - ***className***: the outer field element class name\n     * - ***disabled***: true if the field should render as disabled\n     * - ***loading***: true if the field should render as loading\n     *\n     * Overrides\n     * ---------\n     * - ***fieldRenderer***: function which acts as the render method for this component\n     * - ***mixins.Control***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Control = rsui.form.Control;\n     *     <Control label=\"Foo\" error=\"some error message to display\"> some input field </Control>\n     ***/\n    Control: {\n      render: exports.fieldRenderer,\n      renderInput: function() {\n        return this.props.children;\n      },\n      _controlClassName: function() {\n        return  this._className;\n      }\n    },\n\n    /*** Button\n     * A standard input button which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***icon***: the [icon name](http://semantic-ui.com/elements/icon.html)\n     * - ***className***: additional button class name (\"ui button\" will already be applied)\n     * - ***disabled***: true if the button should be disabled\n     * - ***loading***: true if the button is in a loading state\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Button***: default mixins that should be applied\n     * - ***applyIcon***: ```function({children, className, disabled, icon})```\n     *     apply the icon and update any data for rendering\n     * - ***applyLoadingState***: ```function({children, className, disabled, icon})```\n     *     apply a loading state and update any data for rendering\n     *\n     * Example\n     * --------\n     *     var Button = rsui.form.Button;\n     *     <Button icon=\"comment\" onClick={myClickHandler}> Click me </Control>\n     *     <Button loading={true} label=\"This is loading\"/>\n     ***/\n    Button: {\n      render: function() {\n        var props = this.props,\n            state = this.state || {},\n            context = {\n              children: props.children,\n              className: props.className,\n              disabled: props.disabled || state.disabled,\n              icon: props.icon\n            };\n        if (this.props.label) {\n          context.children = [this.props.label];\n        }\n        if (this.props.loading || state.loading) {\n          exports.applyLoadingState.call(this, context);\n        }\n        if (context.icon) {\n          exports.applyIcon.call(this, context);\n        }\n        if (context.disabled) {\n          context.className += ' disabled';\n        }\n        var attributes = common.defaults({\n          className: common.mergeClassNames('ui button', this._className, context.className)\n        }, this.props);\n        return React.DOM.button(attributes, context.children);\n      }\n    }\n  };\n\n  common.init(exports, classData, {\n    ifReactBackbone: function(options) {\n      options.mixins = {\n        Button: ['modelLoadOn'],\n        Form: ['modelAsyncListener']\n      };\n    }\n  });\n\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/node_modules/react-semantic-ui/lib/input.js":"module.exports = function(React, form, common) {\n\n  function getDefaultValue(self, props) {\n    return props.defaultValue || self.getModelValue();\n  }\n\n  React.mixins.add('modelValueAccessor', {\n    getModelValue: function() {\n      return this.state && this.state.value || this.props.value;\n    },\n    setModelValue: function(value) {\n      this.setState({value: value});\n    }\n  });\n\n  var exports = {\n    mixins: {all: ['modelValueAccessor']},\n\n    optionsRetriever: function(defaultValue) {\n      var rtn = (this.props.options || []).map(function(item) {\n        var label, value, selected;\n        if (typeof item === 'string') {\n          selected = defaultValue === item;\n          value = item;\n          label = item;\n        } else {\n          selected = defaultValue === item.value;\n          value = item.value;\n          label = item.label;\n        }\n        return {value: value, label: label, selected: selected};\n      });\n      if (this.props.placeholder) {\n        rtn.splice(0, 0, {value: '', label: this.props.placeholder});\n      }\n      return rtn;\n    }\n  };\n\n  var classData = {\n\n    /*** Text\n     * Standard text field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***type***: the input type (\"text\" by default)\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <Text label=\"Foo\" defaultValue=\"bar\"> ... </Text>\n     ***/\n    Text: {\n      renderInput: function(props) {\n        props.type = props.type || 'text';\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.input(props);\n      }\n    },\n\n    /*** TextArea\n     * Standard textarea field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <TextArea label=\"Foo\" defaultValue=\"bar\"> ... </TextArea>\n     ***/\n    TextArea: {\n      renderInput: function(props) {\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.textarea(props);\n      }\n    },\n\n    /*** Select\n     * Standard select field that can display a label and optional field wrapper.\n     * A [fancier control](./Dropdown.md) can be used as well.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Select***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *      var Select = rsui.input.Select;\n     *      <Select label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Select: {\n      defaultContainerClass: function() {\n        return common.mergeClassNames('ui dropdown', this.props.type);\n      },\n      renderInput: function(props) {\n        var defaultValue = getDefaultValue(this, props);\n            options = exports.optionsRetriever.call(this, defaultValue).map(function(option) {\n          return React.DOM.option({value: option.value}, option.label);\n        });\n        props.defaultValue = defaultValue;\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.select(props, options);\n      }\n    },\n\n    /*** Checkbox\n     * Standard checkbox field that can display a label and optional field wrapper.\n     *\n     * Properties\n     * ----------\n     * - ***defaultChecked*** true if the field should be checked in it's initial state\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Checkbox***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Checkbox = rsui.input.Checkbox;\n     *     <Checkbox label=\"Foo\" defaultChecked={true} defaultValue=\"abc\"/>\n     ***/\n    Checkbox: {\n      defaultLabelAfter: true,\n      defaultInlineLabel: true,\n      defaultContainerClass: function() {\n        return common.mergeClassNames('ui checkbox', this.props.type, this._className);\n      },\n      renderInput: function(props) {\n        var checked = getDefaultValue(this, props);\n        if (checked === undefined) {\n          checked = this.props.defaultChecked;\n        }\n        props.defaultChecked = checked;\n        props.value = this.props.value || 'true';\n        props.type = 'checkbox';\n        props.className = common.mergeClassNames(props.className);\n        return React.DOM.input(props);\n      },\n      getDOMValue: function(el) {\n        return !!el.checked;\n      }\n    },\n\n    /*** RadioGroup\n     * Collection of radio items field that can display a label and optional field wrapper.  The item\n     * data is retrieved in the same way that the [Dropdown](./Dropdown.md) component does.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.RadioGroup***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    RadioGroup: {\n      defaultContainerClass: function() {\n        return 'grouped fields inline';\n      },\n      renderInput: function(props) {\n        var self = this,\n            state = this.state,\n            value = getDefaultValue(this, props),\n            options = exports.optionsRetriever.call(this, value).map(function(option) {\n              var id = common.uniqueId(),\n                  className = common.mergeClassNames('ui radio checkbox', props.className, this._className);\n              return React.DOM.div({className: 'field'}, React.DOM.div({className: className},\n                React.DOM.input({id: id, type: 'radio', name: props.name, value: option.value,\n                    defaultChecked: option.selected, onChange: common.eventBinder(option.value, 'onChange', self)}),\n                React.DOM.label({htmlFor: id}, option.label)\n              ));\n            });\n        return options;\n      }\n    },\n\n    /*** Dropdown\n     * Similar to the [Select](./Select.md) component but fancier.  See [examples](http://semantic-ui.com/modules/dropdown.html#/examples)\n     * for more details on the actual semantic-ui component.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Dropdown***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Dropdown: {\n      render: function() {\n        var props = this.props,\n            value = getDefaultValue(this, props);\n        var options = exports.optionsRetriever.call(this, value).map(function(option) {\n          return React.DOM.div({className: common.mergeClassNames('item', option.selected ? 'active' : undefined), 'data-value': option.value}, option.label);\n        });\n        var inputProps = common.omit(props, ['label', 'className', 'options', 'value', 'icon', 'onChange', 'onShow', 'onHide']);\n        inputProps.type = 'hidden';\n        inputProps.defaultValue = value;\n        return React.DOM.div({className: common.mergeClassNames('ui dropdown ' + (props.type || 'floating'), props.className, this._className)},\n          React.DOM.input(inputProps),\n          React.DOM.div({className: 'text'}, props.label),\n          React.DOM.i({className: (props.icon || 'dropdown') + ' icon'}),\n          React.DOM.div({className: 'menu'}, options)\n        );\n      },\n      componentDidMount: function() {\n        $(this.getDOMNode()).dropdown({\n          onChange: this.props.onChange,\n          onShow: this.props.onShow,\n          onHide: this.props.onHide\n        });\n      },\n      getDOMValue: function(el) {\n        return $(this.getDOMNode()).dropdown('get value');\n      }\n    }\n  };\n\n  common.init(exports, classData, {\n    defaults: {\n      render: form.fieldRenderer,\n      getDOMValue: function(el) {\n        return $(el).val();\n      }\n    },\n\n    ifReactBackbone: function(options) {\n      exports.defaultModelSetOptions = {validate: true, allowEmpty: true};\n      /**\n       * This mixin listenets for onChange events and set the associated model with that value.  If the\n       * model change succeeds, the \"error\" state attribute will be removed.\n       */\n      React.mixins.add('modelChangeSetter', {\n        modifyInputFieldProps: function (props) {\n          var onChange = props.onChange,\n            model = this.getModel(),\n            key = props.key;\n          if (props.set === undefined || props.set === true) {\n            props.set = exports.defaultModelSetOptions;\n            if (props.set) {\n              var self = this;\n              props.onChange = function (event) {\n                var model = self.getModel();\n                if (model) {\n                  var value = self.getDOMValue(event.currentTarget);\n                  if (self.setModelValue(value, props.set) !== false) {\n                    // we did not encounter a validation error\n                    if (self.state && self.state.error) {\n                      self.setState({error: false});\n                    }\n                  }\n                  if (onChange) {\n                    onChange.call(self, event);\n                  }\n                }\n              };\n            }\n          }\n          return props;\n        }\n      }, 'modelValueAccessor', 'modelEventBinder');\n      options.mixins = {all: ['modelChangeSetter', 'modelFieldValidator']};\n    }\n  });\n\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-react-semantic-ui/node_modules/react-semantic-ui/lib/layout.js":"module.exports = function(React, common) {\n  var exports = {\n    totalPageRetriever: function() {\n      return this.props.totalPages;\n    },\n\n    valueRetriever: function(column, entry) {\n      if (entry.get) {\n        return entry.get(column.key);\n      }\n      return entry[column.key];\n    },\n\n    keyRetriever: function(entry) {\n      return entry.id || entry.key;\n    },\n\n    entriesRetriever: function(entries) {\n      if (entries.models) {\n        return entries.models;\n      }\n      return entries;\n    }\n  };\n  \n  var classData = {\n\n    Loader: {\n      render: function() {\n        var props = this.props,\n            loading = this.state && this.state.loading || props.loading;\n\n        if (this.props.loading || this.state && this.state.loading) {\n          var className = common.mergeClassNames('ui', 'segment', props.className);\n              loadingClass = common.mergeClassNames('ui active', props.type || 'inverted dimmer');\n          return React.DOM.div({className: className},\n                  React.DOM.div({className: loadingClass},\n                    React.DOM.div({className: 'ui loader' + (props.label ? ' text' : '')}, props.label)),\n                  this.props.children);\n        } else {\n          return React.DOM.div({className: props.className}, this.props.children);\n        }\n      }\n    },\n\n\n    Steps: {\n      getInitialState: function() {\n        return {\n          active: this.props.active || this.props.steps[0].key\n        };\n      },\n      render: function() {\n        var self = this,\n            props = this.props,\n            className = common.mergeClassNames('ui steps', props.type, props.className),\n            activeStep = this.state.active,\n            children = props.steps.map(function(step) {\n              var className = common.mergeClassNames('ui step', step.key === activeStep ? 'active' : undefined, step.disabled ? 'disabled' : undefined);\n              return React.DOM.div({className: className, onClick: self.clicker(step)}, step.label);\n            });\n        return React.DOM.div({className: className}, children);\n      },\n      clicker: function(step) {\n        var self = this;\n        return function() {\n          if (!step.disabled) {\n            var rtn = self.props.onChange && self.props.onChange(step);\n            if (rtn === undefined || rtn) {\n              self.setState({active: step.key});\n            }\n          }\n        };\n      }\n    },\n\n\n    /*** Paginator\n     * A paginator component.\n     *\n     * Properties\n     * ----------\n     * - ***totalPages***: the number of total pages\n     * - ***className***: additional top level class name\n     * - ***page***: (default: 1) the current page number (1-based)\n     * - ***radius***: (default: 1) the number of page links (moving out from current page) to show\n     * - ***anchor***: (default: 1) the number of page links (moving out from each end) to show\n     * - ***onChange***: called when the user clicked a page number\n     *\n     * Example\n     * ---------\n     *     <Paginator page={2} totalPages={12} onChange={funtion(pageNumber) {...}}/>\n     ***/\n    Paginator: {\n      getInitialState: function() {\n        return {\n          page: this.props.page || 1\n        };\n      },\n\n      render: function() {\n        var totalPages = exports.totalPageRetriever.call(this);\n        if (totalPages && totalPages > 1) {\n          var current = this.state.page,\n              radius = this.props.radius || 0,\n              anchor = this.props.anchor || 1,\n              separator = this.props.separator || '...',\n              min = Math.max(current - radius, 1),\n              max = Math.min(current + radius, totalPages),\n              showArrows = this.props.showArrows === undefined ? true : this.props.showArrows,\n              totalShowing = (radius * 2) + (anchor * 2) + 3 /* current + separator */,\n              showRightSeparator = (totalPages > current + radius + anchor),\n              showLeftSeparator = (current  > (anchor + Math.max(1, radius))),\n              compact = this.props.compact,\n              index = {},\n              children = [];\n          if (compact) {\n            showArrows = false;\n          }\n\n          if (showLeftSeparator) {\n            totalShowing--;\n          }\n          if (showRightSeparator) {\n            totalShowing--;\n          }\n\n          var i;\n          // starting anchor\n          for (i=1; i<=anchor && i<=totalPages; i++) {\n            children.push(i);\n            index[i] = children.length;\n          }\n\n          // radius\n          for (i=min; i<=max; i++) {\n            if (!index[i]) {\n              children.push(i);\n              index[i] = children.length;\n            }\n          }\n\n          // upper anchor\n          for (i=Math.max(totalPages-anchor+1, current+1); i<=totalPages; i++) {\n            if (!index[i]) {\n              children.push(i);\n              index[i] = children.length;\n            }\n          }\n\n          // always keep the same number of indicators showing - start down from middle\n          for (i=current; i > 0 && children.length < totalShowing; i--) {\n            if (typeof index[i] === 'undefined') {\n              _idx = index[i+1]-1;\n              children.splice(_idx, 0, i);\n              index[i] = _idx+1;\n            }\n          }\n          for (i=current; children.length < totalShowing && children.length < totalPages; i++) {\n            if (!index[i]) {\n              children.splice(i-1, 0, i);\n            }\n          }\n\n          // map the children to components\n          var self = this;\n          children = children.map(function(child) {\n            if (child === current) {\n              return React.DOM.div({className: 'active item'}, child);\n            } else {\n              return React.DOM.a({className: 'item', href: '#' + child, onClick: common.eventBinder(child, 'onChange', self, true)}, child);\n            }\n          });\n\n          // separators\n          if (showLeftSeparator) {\n            if (compact) {\n              children.splice(anchor, 0, React.DOM.a({className: 'icon item'}, React.DOM.i({className: 'left arrow icon', onClick: common.eventBinder(current-1, 'onChange', self, true)})));\n            } else {\n              children.splice(anchor, 0, React.DOM.div({className: 'disabled item'}, separator));\n            }\n          }\n          if (showRightSeparator) {\n            if (compact) {\n              children.splice(children.length-anchor, 0, React.DOM.a({className: 'icon item'}, React.DOM.i({className: 'right arrow icon', onClick: common.eventBinder(current+1, 'onChange', self, true)})));\n            } else {\n              children.splice(children.length-anchor, 0, React.DOM.div({className: 'disabled item'}, separator));\n            }\n          }\n\n          // arrows\n          if (showArrows) {\n            var nodeName, className;\n            if (current === 1) {\n              nodeName = 'div';\n              className = 'icon disabled item';\n            } else {\n              nodeName = 'a';\n              className = 'icon item';\n            }\n            children.splice(0, 0, React.DOM[nodeName]({\n              className: className, onClick: current > 1 ? common.eventBinder(current-1, 'onChange', self, true) : undefined\n            }, React.DOM.i({className: 'left arrow icon'})));\n\n            if (current === totalPages) {\n              nodeName = 'div';\n              className = 'icon disabled item';\n            } else {\n              nodeName = 'a';\n              className = 'icon item';\n            }\n            children.splice(children.length, 0, React.DOM[nodeName]({\n              className: className, onClick: current < totalPages ? common.eventBinder(current+1, 'onChange', self, true) : undefined\n            }, React.DOM.i({className: 'right arrow icon'})));\n          }\n\n          return React.DOM.div({className: 'ui pagination menu'}, children);\n\n        } else {\n          return React.DOM.div();\n        }\n      },\n\n      onChange: function(pageNumber) {\n        this.setState({\n          page: pageNumber\n        });\n      },\n\n      setPage: function(pageNumber) {\n        this.setState({\n          page: pageNumber\n        });\n      }\n    },\n\n\n    Menu: {\n      getInitialState: function() {\n        return {\n          active: this.props.active || this.props.items[0].key\n        };\n      },\n      render: function() {\n        var self = this,\n            props = this.props,\n            items = props.items || [],\n            activeKey = this.state.active,\n            active;\n        for (var i=0; i<items; i++) {\n          if (activeKey === items[i].key) {\n            active = items[i];\n            break;\n          }\n        }\n        var children = items.map(function(item) {\n          return React.DOM.a({className: common.mergeClassNames((item.key === activeKey) && 'active', 'item', item.className), href: item.href || item.key,\n              onClick: item.href ? props.onClick : common.eventBinder(item, 'onChange', self, true)}, item.icon ? React.DOM.i({className: item.icon + ' icon'}) : undefined, item.label);\n        });\n\n        return React.DOM.div({className: common.mergeClassNames('ui menu', props.className)},\n          children,\n          props.children\n        );\n      },\n      onChange: function(item) {\n        this.setState({active: item.key});\n        if (item.activate) {\n          item.activate();\n        }\n      },\n      setActive: function(key) {\n        this.setState({active: key});\n      }\n    },\n\n\n    Tabs: {\n      getInitialState: function() {\n        return {\n          active: this.props.active || this.props.tabs[0].key\n        };\n      },\n      render: function() {\n        var self = this,\n            props = this.props,\n            tabs = props.tabs || [],\n            type = props.type || 'top attached tabular',\n            bodyType = props.bodyType || 'bottom attached segment',\n            activeKey = this.state.active,\n            active;\n        for (var i=0; i<props.tabs.length; i++) {\n          if (activeKey === props.tabs[i].key) {\n            active = props.tabs[i];\n            break;\n          }\n        }\n\n        var tabLabels = tabs.map(function(tab) {\n          return React.DOM.a({className: common.mergeClassNames((tab.key === activeKey) && 'active', 'item', tab.className), href: tab.key,\n              onClick: common.eventBinder(tab, 'onChange', self, true)}, tab.icon ? React.DOM.i({className: tab.icon + ' icon'}) : undefined, tab.label);\n        });\n        var pageComponent = active.page();\n\n        return React.DOM.div({className: props.className},\n          React.DOM.div({className: 'ui ' + type + ' menu'},\n            tabLabels\n          ),\n          React.DOM.div({className: 'ui ' + bodyType},\n            pageComponent\n          )\n        );\n      },\n\n      onChange: function(tab) {\n        this.setState({active: tab.key});\n      }\n    },\n\n\n    Table: {\n      render: function() {\n        var self = this,\n            props = this.props;\n        var cols = props.cols.map(function(col) {\n          var label = common.result(col.label),\n              className = col.colClass;\n          if (typeof className === 'function') {\n            className = className.call(self, value, col);\n          }\n          return React.DOM.th({className: className}, label);\n        });\n\n        var index = 0,\n            rows = exports.entriesRetriever.call(this, props.entries).map(function(entry) {\n              var cells = props.cols.map(function(col) {\n                var value = exports.valueRetriever.call(this, col, entry),\n                    cellClassName = col.cellClassName;\n                if (typeof cellClassName === 'function') {\n                  cellClassName = cellClassName.call(self, value, col);\n                }\n                index++;\n                if (col.formatter) {\n                  value = col.formatter.call(this, value, entry, index, col);\n                }\n                if (col.factory) {\n                  value = col.factory.call(this, value, entry, index, col);\n                }\n                return React.DOM.td({className: cellClassName, key: col.key}, value);\n              });\n              var className = props.rowClassName && props.rowClassName.call(this, entry);\n              return React.DOM.tr({className: className, key: exports.keyRetriever(entry)}, cells);\n            });\n\n        return React.DOM.table({className: common.mergeClassNames('ui table', props.className)},\n          React.DOM.thead(undefined, cols),\n          React.DOM.tbody(undefined, rows)\n        );\n      }\n    }\n  };\n\n  common.init(exports, classData);\n\n  return exports;\n};\n"}